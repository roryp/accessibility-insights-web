// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ReportBody renders 1`] = `
<body-section>
  <header-section
    cardsViewData={
      Object {
        "allCardsCollapsed": true,
        "cards": Object {
          "fail": Array [
            Object {
              "description": "sample-description",
              "guidance": Array [
                Object {
                  "href": "sample-guidance-href",
                  "text": "sample-guidance-text",
                },
              ],
              "id": "some-rule",
              "nodes": Array [
                Object {
                  "descriptors": Object {
                    "snippet": "this is a sample snippet",
                  },
                  "identifiers": Object {
                    "conciseName": "body img",
                    "css-selector": "body img",
                    "identifier": "body img",
                  },
                  "resolution": Object {
                    "how-to-fix-web": Object {
                      "all": Array [],
                      "any": Array [
                        "Element does not have an alt attribute",
                        "aria-label attribute does not exist or is empty",
                        "aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty",
                      ],
                      "none": Array [],
                    },
                    "howToFixSummary": "sample how to fix summary",
                  },
                  "ruleId": "image-alt",
                  "status": "fail",
                  "uid": "some-guid-here",
                },
              ],
              "url": "sample-url",
            },
          ],
          "inapplicable": Array [],
          "pass": Array [],
          "unknown": Array [],
        },
        "visualHelperEnabled": true,
      }
    }
    deps={Object {}}
    description="test description"
    fixInstructionProcessor={
      proxy {
        "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
        "backgroundColorText": "background color: ",
        "backgroundRegExp": /background color: \\(#\\[0-9a-f\\]\\{6\\}\\)/i,
        "colorValueMatcher": "(#[0-9a-f]{6})",
        "foregroundColorText": "foreground color: ",
        "foregroundRegExp": /foreground color: \\(#\\[0-9a-f\\]\\{6\\}\\)/i,
      }
    }
    getCollapsibleScript={[Function]}
    getGuidanceTagsFromGuidanceLinks={[Function]}
    pageTitle="page-title"
    pageUrl="url:target-page"
    scanDate={2019-05-29T19:12:16.804Z}
    scanMetadata={
      Object {
        "targetAppInfo": Object {
          "name": "app",
        },
        "timestamp": "today",
        "toolData": Object {
          "applicationProperties": Object {
            "environmentName": "environmentName",
            "name": "app-name",
            "version": "app-version",
          },
          "scanEngineProperties": Object {
            "name": "engine-name",
            "version": "engine-version",
          },
        },
      }
    }
    scanResult={
      Object {
        "inapplicable": Array [],
        "incomplete": Array [],
        "passes": Array [],
        "targetPageTitle": "page-title",
        "targetPageUrl": "url:target-page",
        "timestamp": "today",
        "violations": Array [],
      }
    }
    shouldAlertFailuresCount={false}
    targetAppInfo={
      Object {
        "name": "app",
      }
    }
    toUtcString={[Function]}
    toolData={
      Object {
        "applicationProperties": Object {
          "environmentName": "environmentName",
          "name": "app-name",
          "version": "app-version",
        },
        "scanEngineProperties": Object {
          "name": "engine-name",
          "version": "engine-version",
        },
      }
    }
    userConfigurationStoreData={null}
  />
  <content-container>
    <title-section />
    <summary-section
      cardsViewData={
        Object {
          "allCardsCollapsed": true,
          "cards": Object {
            "fail": Array [
              Object {
                "description": "sample-description",
                "guidance": Array [
                  Object {
                    "href": "sample-guidance-href",
                    "text": "sample-guidance-text",
                  },
                ],
                "id": "some-rule",
                "nodes": Array [
                  Object {
                    "descriptors": Object {
                      "snippet": "this is a sample snippet",
                    },
                    "identifiers": Object {
                      "conciseName": "body img",
                      "css-selector": "body img",
                      "identifier": "body img",
                    },
                    "resolution": Object {
                      "how-to-fix-web": Object {
                        "all": Array [],
                        "any": Array [
                          "Element does not have an alt attribute",
                          "aria-label attribute does not exist or is empty",
                          "aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty",
                        ],
                        "none": Array [],
                      },
                      "howToFixSummary": "sample how to fix summary",
                    },
                    "ruleId": "image-alt",
                    "status": "fail",
                    "uid": "some-guid-here",
                  },
                ],
                "url": "sample-url",
              },
            ],
            "inapplicable": Array [],
            "pass": Array [],
            "unknown": Array [],
          },
          "visualHelperEnabled": true,
        }
      }
      deps={Object {}}
      description="test description"
      fixInstructionProcessor={
        proxy {
          "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
          "backgroundColorText": "background color: ",
          "backgroundRegExp": /background color: \\(#\\[0-9a-f\\]\\{6\\}\\)/i,
          "colorValueMatcher": "(#[0-9a-f]{6})",
          "foregroundColorText": "foreground color: ",
          "foregroundRegExp": /foreground color: \\(#\\[0-9a-f\\]\\{6\\}\\)/i,
        }
      }
      getCollapsibleScript={[Function]}
      getGuidanceTagsFromGuidanceLinks={[Function]}
      pageTitle="page-title"
      pageUrl="url:target-page"
      scanDate={2019-05-29T19:12:16.804Z}
      scanMetadata={
        Object {
          "targetAppInfo": Object {
            "name": "app",
          },
          "timestamp": "today",
          "toolData": Object {
            "applicationProperties": Object {
              "environmentName": "environmentName",
              "name": "app-name",
              "version": "app-version",
            },
            "scanEngineProperties": Object {
              "name": "engine-name",
              "version": "engine-version",
            },
          },
        }
      }
      scanResult={
        Object {
          "inapplicable": Array [],
          "incomplete": Array [],
          "passes": Array [],
          "targetPageTitle": "page-title",
          "targetPageUrl": "url:target-page",
          "timestamp": "today",
          "violations": Array [],
        }
      }
      shouldAlertFailuresCount={false}
      targetAppInfo={
        Object {
          "name": "app",
        }
      }
      toUtcString={[Function]}
      toolData={
        Object {
          "applicationProperties": Object {
            "environmentName": "environmentName",
            "name": "app-name",
            "version": "app-version",
          },
          "scanEngineProperties": Object {
            "name": "engine-name",
            "version": "engine-version",
          },
        }
      }
      userConfigurationStoreData={null}
    />
    <details-section
      cardsViewData={
        Object {
          "allCardsCollapsed": true,
          "cards": Object {
            "fail": Array [
              Object {
                "description": "sample-description",
                "guidance": Array [
                  Object {
                    "href": "sample-guidance-href",
                    "text": "sample-guidance-text",
                  },
                ],
                "id": "some-rule",
                "nodes": Array [
                  Object {
                    "descriptors": Object {
                      "snippet": "this is a sample snippet",
                    },
                    "identifiers": Object {
                      "conciseName": "body img",
                      "css-selector": "body img",
                      "identifier": "body img",
                    },
                    "resolution": Object {
                      "how-to-fix-web": Object {
                        "all": Array [],
                        "any": Array [
                          "Element does not have an alt attribute",
                          "aria-label attribute does not exist or is empty",
                          "aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty",
                        ],
                        "none": Array [],
                      },
                      "howToFixSummary": "sample how to fix summary",
                    },
                    "ruleId": "image-alt",
                    "status": "fail",
                    "uid": "some-guid-here",
                  },
                ],
                "url": "sample-url",
              },
            ],
            "inapplicable": Array [],
            "pass": Array [],
            "unknown": Array [],
          },
          "visualHelperEnabled": true,
        }
      }
      deps={Object {}}
      description="test description"
      fixInstructionProcessor={
        proxy {
          "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
          "backgroundColorText": "background color: ",
          "backgroundRegExp": /background color: \\(#\\[0-9a-f\\]\\{6\\}\\)/i,
          "colorValueMatcher": "(#[0-9a-f]{6})",
          "foregroundColorText": "foreground color: ",
          "foregroundRegExp": /foreground color: \\(#\\[0-9a-f\\]\\{6\\}\\)/i,
        }
      }
      getCollapsibleScript={[Function]}
      getGuidanceTagsFromGuidanceLinks={[Function]}
      pageTitle="page-title"
      pageUrl="url:target-page"
      scanDate={2019-05-29T19:12:16.804Z}
      scanMetadata={
        Object {
          "targetAppInfo": Object {
            "name": "app",
          },
          "timestamp": "today",
          "toolData": Object {
            "applicationProperties": Object {
              "environmentName": "environmentName",
              "name": "app-name",
              "version": "app-version",
            },
            "scanEngineProperties": Object {
              "name": "engine-name",
              "version": "engine-version",
            },
          },
        }
      }
      scanResult={
        Object {
          "inapplicable": Array [],
          "incomplete": Array [],
          "passes": Array [],
          "targetPageTitle": "page-title",
          "targetPageUrl": "url:target-page",
          "timestamp": "today",
          "violations": Array [],
        }
      }
      shouldAlertFailuresCount={false}
      targetAppInfo={
        Object {
          "name": "app",
        }
      }
      toUtcString={[Function]}
      toolData={
        Object {
          "applicationProperties": Object {
            "environmentName": "environmentName",
            "name": "app-name",
            "version": "app-version",
          },
          "scanEngineProperties": Object {
            "name": "engine-name",
            "version": "engine-version",
          },
        }
      }
      userConfigurationStoreData={null}
    />
    <result-section
      cardsViewData={
        Object {
          "allCardsCollapsed": true,
          "cards": Object {
            "fail": Array [
              Object {
                "description": "sample-description",
                "guidance": Array [
                  Object {
                    "href": "sample-guidance-href",
                    "text": "sample-guidance-text",
                  },
                ],
                "id": "some-rule",
                "nodes": Array [
                  Object {
                    "descriptors": Object {
                      "snippet": "this is a sample snippet",
                    },
                    "identifiers": Object {
                      "conciseName": "body img",
                      "css-selector": "body img",
                      "identifier": "body img",
                    },
                    "resolution": Object {
                      "how-to-fix-web": Object {
                        "all": Array [],
                        "any": Array [
                          "Element does not have an alt attribute",
                          "aria-label attribute does not exist or is empty",
                          "aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty",
                        ],
                        "none": Array [],
                      },
                      "howToFixSummary": "sample how to fix summary",
                    },
                    "ruleId": "image-alt",
                    "status": "fail",
                    "uid": "some-guid-here",
                  },
                ],
                "url": "sample-url",
              },
            ],
            "inapplicable": Array [],
            "pass": Array [],
            "unknown": Array [],
          },
          "visualHelperEnabled": true,
        }
      }
      deps={Object {}}
      description="test description"
      fixInstructionProcessor={
        proxy {
          "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
          "backgroundColorText": "background color: ",
          "backgroundRegExp": /background color: \\(#\\[0-9a-f\\]\\{6\\}\\)/i,
          "colorValueMatcher": "(#[0-9a-f]{6})",
          "foregroundColorText": "foreground color: ",
          "foregroundRegExp": /foreground color: \\(#\\[0-9a-f\\]\\{6\\}\\)/i,
        }
      }
      getCollapsibleScript={[Function]}
      getGuidanceTagsFromGuidanceLinks={[Function]}
      pageTitle="page-title"
      pageUrl="url:target-page"
      scanDate={2019-05-29T19:12:16.804Z}
      scanMetadata={
        Object {
          "targetAppInfo": Object {
            "name": "app",
          },
          "timestamp": "today",
          "toolData": Object {
            "applicationProperties": Object {
              "environmentName": "environmentName",
              "name": "app-name",
              "version": "app-version",
            },
            "scanEngineProperties": Object {
              "name": "engine-name",
              "version": "engine-version",
            },
          },
        }
      }
      scanResult={
        Object {
          "inapplicable": Array [],
          "incomplete": Array [],
          "passes": Array [],
          "targetPageTitle": "page-title",
          "targetPageUrl": "url:target-page",
          "timestamp": "today",
          "violations": Array [],
        }
      }
      shouldAlertFailuresCount={false}
      targetAppInfo={
        Object {
          "name": "app",
        }
      }
      toUtcString={[Function]}
      toolData={
        Object {
          "applicationProperties": Object {
            "environmentName": "environmentName",
            "name": "app-name",
            "version": "app-version",
          },
          "scanEngineProperties": Object {
            "name": "engine-name",
            "version": "engine-version",
          },
        }
      }
      userConfigurationStoreData={null}
    >
      <failed-instances-section
        cardsViewData={
          Object {
            "allCardsCollapsed": true,
            "cards": Object {
              "fail": Array [
                Object {
                  "description": "sample-description",
                  "guidance": Array [
                    Object {
                      "href": "sample-guidance-href",
                      "text": "sample-guidance-text",
                    },
                  ],
                  "id": "some-rule",
                  "nodes": Array [
                    Object {
                      "descriptors": Object {
                        "snippet": "this is a sample snippet",
                      },
                      "identifiers": Object {
                        "conciseName": "body img",
                        "css-selector": "body img",
                        "identifier": "body img",
                      },
                      "resolution": Object {
                        "how-to-fix-web": Object {
                          "all": Array [],
                          "any": Array [
                            "Element does not have an alt attribute",
                            "aria-label attribute does not exist or is empty",
                            "aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty",
                          ],
                          "none": Array [],
                        },
                        "howToFixSummary": "sample how to fix summary",
                      },
                      "ruleId": "image-alt",
                      "status": "fail",
                      "uid": "some-guid-here",
                    },
                  ],
                  "url": "sample-url",
                },
              ],
              "inapplicable": Array [],
              "pass": Array [],
              "unknown": Array [],
            },
            "visualHelperEnabled": true,
          }
        }
        deps={Object {}}
        description="test description"
        fixInstructionProcessor={
          proxy {
            "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
            "backgroundColorText": "background color: ",
            "backgroundRegExp": /background color: \\(#\\[0-9a-f\\]\\{6\\}\\)/i,
            "colorValueMatcher": "(#[0-9a-f]{6})",
            "foregroundColorText": "foreground color: ",
            "foregroundRegExp": /foreground color: \\(#\\[0-9a-f\\]\\{6\\}\\)/i,
          }
        }
        getCollapsibleScript={[Function]}
        getGuidanceTagsFromGuidanceLinks={[Function]}
        pageTitle="page-title"
        pageUrl="url:target-page"
        scanDate={2019-05-29T19:12:16.804Z}
        scanMetadata={
          Object {
            "targetAppInfo": Object {
              "name": "app",
            },
            "timestamp": "today",
            "toolData": Object {
              "applicationProperties": Object {
                "environmentName": "environmentName",
                "name": "app-name",
                "version": "app-version",
              },
              "scanEngineProperties": Object {
                "name": "engine-name",
                "version": "engine-version",
              },
            },
          }
        }
        scanResult={
          Object {
            "inapplicable": Array [],
            "incomplete": Array [],
            "passes": Array [],
            "targetPageTitle": "page-title",
            "targetPageUrl": "url:target-page",
            "timestamp": "today",
            "violations": Array [],
          }
        }
        shouldAlertFailuresCount={false}
        targetAppInfo={
          Object {
            "name": "app",
          }
        }
        toUtcString={[Function]}
        toolData={
          Object {
            "applicationProperties": Object {
              "environmentName": "environmentName",
              "name": "app-name",
              "version": "app-version",
            },
            "scanEngineProperties": Object {
              "name": "engine-name",
              "version": "engine-version",
            },
          }
        }
        userConfigurationStoreData={null}
      />
      <passed-checks-section
        cardsViewData={
          Object {
            "allCardsCollapsed": true,
            "cards": Object {
              "fail": Array [
                Object {
                  "description": "sample-description",
                  "guidance": Array [
                    Object {
                      "href": "sample-guidance-href",
                      "text": "sample-guidance-text",
                    },
                  ],
                  "id": "some-rule",
                  "nodes": Array [
                    Object {
                      "descriptors": Object {
                        "snippet": "this is a sample snippet",
                      },
                      "identifiers": Object {
                        "conciseName": "body img",
                        "css-selector": "body img",
                        "identifier": "body img",
                      },
                      "resolution": Object {
                        "how-to-fix-web": Object {
                          "all": Array [],
                          "any": Array [
                            "Element does not have an alt attribute",
                            "aria-label attribute does not exist or is empty",
                            "aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty",
                          ],
                          "none": Array [],
                        },
                        "howToFixSummary": "sample how to fix summary",
                      },
                      "ruleId": "image-alt",
                      "status": "fail",
                      "uid": "some-guid-here",
                    },
                  ],
                  "url": "sample-url",
                },
              ],
              "inapplicable": Array [],
              "pass": Array [],
              "unknown": Array [],
            },
            "visualHelperEnabled": true,
          }
        }
        deps={Object {}}
        description="test description"
        fixInstructionProcessor={
          proxy {
            "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
            "backgroundColorText": "background color: ",
            "backgroundRegExp": /background color: \\(#\\[0-9a-f\\]\\{6\\}\\)/i,
            "colorValueMatcher": "(#[0-9a-f]{6})",
            "foregroundColorText": "foreground color: ",
            "foregroundRegExp": /foreground color: \\(#\\[0-9a-f\\]\\{6\\}\\)/i,
          }
        }
        getCollapsibleScript={[Function]}
        getGuidanceTagsFromGuidanceLinks={[Function]}
        pageTitle="page-title"
        pageUrl="url:target-page"
        scanDate={2019-05-29T19:12:16.804Z}
        scanMetadata={
          Object {
            "targetAppInfo": Object {
              "name": "app",
            },
            "timestamp": "today",
            "toolData": Object {
              "applicationProperties": Object {
                "environmentName": "environmentName",
                "name": "app-name",
                "version": "app-version",
              },
              "scanEngineProperties": Object {
                "name": "engine-name",
                "version": "engine-version",
              },
            },
          }
        }
        scanResult={
          Object {
            "inapplicable": Array [],
            "incomplete": Array [],
            "passes": Array [],
            "targetPageTitle": "page-title",
            "targetPageUrl": "url:target-page",
            "timestamp": "today",
            "violations": Array [],
          }
        }
        shouldAlertFailuresCount={false}
        targetAppInfo={
          Object {
            "name": "app",
          }
        }
        toUtcString={[Function]}
        toolData={
          Object {
            "applicationProperties": Object {
              "environmentName": "environmentName",
              "name": "app-name",
              "version": "app-version",
            },
            "scanEngineProperties": Object {
              "name": "engine-name",
              "version": "engine-version",
            },
          }
        }
        userConfigurationStoreData={null}
      />
      <not-applicable-checks-section
        cardsViewData={
          Object {
            "allCardsCollapsed": true,
            "cards": Object {
              "fail": Array [
                Object {
                  "description": "sample-description",
                  "guidance": Array [
                    Object {
                      "href": "sample-guidance-href",
                      "text": "sample-guidance-text",
                    },
                  ],
                  "id": "some-rule",
                  "nodes": Array [
                    Object {
                      "descriptors": Object {
                        "snippet": "this is a sample snippet",
                      },
                      "identifiers": Object {
                        "conciseName": "body img",
                        "css-selector": "body img",
                        "identifier": "body img",
                      },
                      "resolution": Object {
                        "how-to-fix-web": Object {
                          "all": Array [],
                          "any": Array [
                            "Element does not have an alt attribute",
                            "aria-label attribute does not exist or is empty",
                            "aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty",
                          ],
                          "none": Array [],
                        },
                        "howToFixSummary": "sample how to fix summary",
                      },
                      "ruleId": "image-alt",
                      "status": "fail",
                      "uid": "some-guid-here",
                    },
                  ],
                  "url": "sample-url",
                },
              ],
              "inapplicable": Array [],
              "pass": Array [],
              "unknown": Array [],
            },
            "visualHelperEnabled": true,
          }
        }
        deps={Object {}}
        description="test description"
        fixInstructionProcessor={
          proxy {
            "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
            "backgroundColorText": "background color: ",
            "backgroundRegExp": /background color: \\(#\\[0-9a-f\\]\\{6\\}\\)/i,
            "colorValueMatcher": "(#[0-9a-f]{6})",
            "foregroundColorText": "foreground color: ",
            "foregroundRegExp": /foreground color: \\(#\\[0-9a-f\\]\\{6\\}\\)/i,
          }
        }
        getCollapsibleScript={[Function]}
        getGuidanceTagsFromGuidanceLinks={[Function]}
        pageTitle="page-title"
        pageUrl="url:target-page"
        scanDate={2019-05-29T19:12:16.804Z}
        scanMetadata={
          Object {
            "targetAppInfo": Object {
              "name": "app",
            },
            "timestamp": "today",
            "toolData": Object {
              "applicationProperties": Object {
                "environmentName": "environmentName",
                "name": "app-name",
                "version": "app-version",
              },
              "scanEngineProperties": Object {
                "name": "engine-name",
                "version": "engine-version",
              },
            },
          }
        }
        scanResult={
          Object {
            "inapplicable": Array [],
            "incomplete": Array [],
            "passes": Array [],
            "targetPageTitle": "page-title",
            "targetPageUrl": "url:target-page",
            "timestamp": "today",
            "violations": Array [],
          }
        }
        shouldAlertFailuresCount={false}
        targetAppInfo={
          Object {
            "name": "app",
          }
        }
        toUtcString={[Function]}
        toolData={
          Object {
            "applicationProperties": Object {
              "environmentName": "environmentName",
              "name": "app-name",
              "version": "app-version",
            },
            "scanEngineProperties": Object {
              "name": "engine-name",
              "version": "engine-version",
            },
          }
        }
        userConfigurationStoreData={null}
      />
    </result-section>
  </content-container>
  <footer-section>
    <footer-text
      cardsViewData={
        Object {
          "allCardsCollapsed": true,
          "cards": Object {
            "fail": Array [
              Object {
                "description": "sample-description",
                "guidance": Array [
                  Object {
                    "href": "sample-guidance-href",
                    "text": "sample-guidance-text",
                  },
                ],
                "id": "some-rule",
                "nodes": Array [
                  Object {
                    "descriptors": Object {
                      "snippet": "this is a sample snippet",
                    },
                    "identifiers": Object {
                      "conciseName": "body img",
                      "css-selector": "body img",
                      "identifier": "body img",
                    },
                    "resolution": Object {
                      "how-to-fix-web": Object {
                        "all": Array [],
                        "any": Array [
                          "Element does not have an alt attribute",
                          "aria-label attribute does not exist or is empty",
                          "aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty",
                        ],
                        "none": Array [],
                      },
                      "howToFixSummary": "sample how to fix summary",
                    },
                    "ruleId": "image-alt",
                    "status": "fail",
                    "uid": "some-guid-here",
                  },
                ],
                "url": "sample-url",
              },
            ],
            "inapplicable": Array [],
            "pass": Array [],
            "unknown": Array [],
          },
          "visualHelperEnabled": true,
        }
      }
      deps={Object {}}
      description="test description"
      fixInstructionProcessor={
        proxy {
          "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
          "backgroundColorText": "background color: ",
          "backgroundRegExp": /background color: \\(#\\[0-9a-f\\]\\{6\\}\\)/i,
          "colorValueMatcher": "(#[0-9a-f]{6})",
          "foregroundColorText": "foreground color: ",
          "foregroundRegExp": /foreground color: \\(#\\[0-9a-f\\]\\{6\\}\\)/i,
        }
      }
      getCollapsibleScript={[Function]}
      getGuidanceTagsFromGuidanceLinks={[Function]}
      pageTitle="page-title"
      pageUrl="url:target-page"
      scanDate={2019-05-29T19:12:16.804Z}
      scanMetadata={
        Object {
          "targetAppInfo": Object {
            "name": "app",
          },
          "timestamp": "today",
          "toolData": Object {
            "applicationProperties": Object {
              "environmentName": "environmentName",
              "name": "app-name",
              "version": "app-version",
            },
            "scanEngineProperties": Object {
              "name": "engine-name",
              "version": "engine-version",
            },
          },
        }
      }
      scanResult={
        Object {
          "inapplicable": Array [],
          "incomplete": Array [],
          "passes": Array [],
          "targetPageTitle": "page-title",
          "targetPageUrl": "url:target-page",
          "timestamp": "today",
          "violations": Array [],
        }
      }
      shouldAlertFailuresCount={false}
      targetAppInfo={
        Object {
          "name": "app",
        }
      }
      toUtcString={[Function]}
      toolData={
        Object {
          "applicationProperties": Object {
            "environmentName": "environmentName",
            "name": "app-name",
            "version": "app-version",
          },
          "scanEngineProperties": Object {
            "name": "engine-name",
            "version": "engine-version",
          },
        }
      }
      userConfigurationStoreData={null}
    />
  </footer-section>
</body-section>
`;
