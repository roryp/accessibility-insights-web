// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CommandBar renders does not create report export when scan metadata is null 1`] = `
<section
  aria-label="command bar"
  className="commandBar"
>
  <div
    className="items"
  >
    <InsightsCommandButton
      data-automation-id="command-button-refresh"
      disabled={true}
      iconProps={
        Object {
          "iconName": "Refresh",
        }
      }
      onClick={[Function]}
      text="Start over"
    />
  </div>
  <div
    className="farItems"
  >
    <FlaggedComponent
      enableJSXElement={null}
      featureFlag="exportReport"
      featureFlagStoreData={
        Object {
          "somefeatureflag": true,
        }
      }
    />
    <InsightsCommandButton
      ariaLabel="settings"
      className="settingsGearButton"
      data-automation-id="command-button-settings"
      iconProps={
        Object {
          "className": "settingsGearButtonIcon",
          "iconName": "Gear",
        }
      }
      onClick={[Function]}
    />
  </div>
</section>
`;

exports[`CommandBar renders while status is <Completed> 1`] = `
<section
  aria-label="command bar"
  className="commandBar"
>
  <div
    className="items"
  >
    <InsightsCommandButton
      data-automation-id="command-button-refresh"
      disabled={false}
      iconProps={
        Object {
          "iconName": "Refresh",
        }
      }
      onClick={[Function]}
      text="Start over"
    />
  </div>
  <div
    className="farItems"
  >
    <FlaggedComponent
      enableJSXElement={
        <ReportExportComponent
          deps={
            Object {
              "getDateFromTimestamp": [Function],
              "reportGenerator": proxy {
                "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
                "assessmentReportHtmlGenerator": undefined,
                "reportHtmlGenerator": undefined,
                "reportNameGenerator": undefined,
              },
              "scanActionCreator": null,
            }
          }
          featureFlagStoreData={
            Object {
              "somefeatureflag": true,
            }
          }
          getExportDescription={[Function]}
          htmlGenerator={[Function]}
          pageTitle="scan target name"
          reportExportFormat="AutomatedChecks"
          scanDate={1970-01-01T00:00:00.000Z}
          updatePersistedDescription={[Function]}
        />
      }
      featureFlag="exportReport"
      featureFlagStoreData={
        Object {
          "somefeatureflag": true,
        }
      }
    />
    <InsightsCommandButton
      ariaLabel="settings"
      className="settingsGearButton"
      data-automation-id="command-button-settings"
      iconProps={
        Object {
          "className": "settingsGearButtonIcon",
          "iconName": "Gear",
        }
      }
      onClick={[Function]}
    />
  </div>
</section>
`;

exports[`CommandBar renders while status is <Default> 1`] = `
<section
  aria-label="command bar"
  className="commandBar"
>
  <div
    className="items"
  >
    <InsightsCommandButton
      data-automation-id="command-button-refresh"
      disabled={false}
      iconProps={
        Object {
          "iconName": "Refresh",
        }
      }
      onClick={[Function]}
      text="Start over"
    />
  </div>
  <div
    className="farItems"
  >
    <FlaggedComponent
      enableJSXElement={
        <ReportExportComponent
          deps={
            Object {
              "getDateFromTimestamp": [Function],
              "reportGenerator": proxy {
                "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
                "assessmentReportHtmlGenerator": undefined,
                "reportHtmlGenerator": undefined,
                "reportNameGenerator": undefined,
              },
              "scanActionCreator": null,
            }
          }
          featureFlagStoreData={
            Object {
              "somefeatureflag": true,
            }
          }
          getExportDescription={[Function]}
          htmlGenerator={[Function]}
          pageTitle="scan target name"
          reportExportFormat="AutomatedChecks"
          scanDate={1970-01-01T00:00:00.000Z}
          updatePersistedDescription={[Function]}
        />
      }
      featureFlag="exportReport"
      featureFlagStoreData={
        Object {
          "somefeatureflag": true,
        }
      }
    />
    <InsightsCommandButton
      ariaLabel="settings"
      className="settingsGearButton"
      data-automation-id="command-button-settings"
      iconProps={
        Object {
          "className": "settingsGearButtonIcon",
          "iconName": "Gear",
        }
      }
      onClick={[Function]}
    />
  </div>
</section>
`;

exports[`CommandBar renders while status is <Failed> 1`] = `
<section
  aria-label="command bar"
  className="commandBar"
>
  <div
    className="items"
  >
    <InsightsCommandButton
      data-automation-id="command-button-refresh"
      disabled={false}
      iconProps={
        Object {
          "iconName": "Refresh",
        }
      }
      onClick={[Function]}
      text="Start over"
    />
  </div>
  <div
    className="farItems"
  >
    <FlaggedComponent
      enableJSXElement={
        <ReportExportComponent
          deps={
            Object {
              "getDateFromTimestamp": [Function],
              "reportGenerator": proxy {
                "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
                "assessmentReportHtmlGenerator": undefined,
                "reportHtmlGenerator": undefined,
                "reportNameGenerator": undefined,
              },
              "scanActionCreator": null,
            }
          }
          featureFlagStoreData={
            Object {
              "somefeatureflag": true,
            }
          }
          getExportDescription={[Function]}
          htmlGenerator={[Function]}
          pageTitle="scan target name"
          reportExportFormat="AutomatedChecks"
          scanDate={1970-01-01T00:00:00.000Z}
          updatePersistedDescription={[Function]}
        />
      }
      featureFlag="exportReport"
      featureFlagStoreData={
        Object {
          "somefeatureflag": true,
        }
      }
    />
    <InsightsCommandButton
      ariaLabel="settings"
      className="settingsGearButton"
      data-automation-id="command-button-settings"
      iconProps={
        Object {
          "className": "settingsGearButtonIcon",
          "iconName": "Gear",
        }
      }
      onClick={[Function]}
    />
  </div>
</section>
`;

exports[`CommandBar renders while status is <Scanning> 1`] = `
<section
  aria-label="command bar"
  className="commandBar"
>
  <div
    className="items"
  >
    <InsightsCommandButton
      data-automation-id="command-button-refresh"
      disabled={true}
      iconProps={
        Object {
          "iconName": "Refresh",
        }
      }
      onClick={[Function]}
      text="Start over"
    />
  </div>
  <div
    className="farItems"
  >
    <FlaggedComponent
      enableJSXElement={
        <ReportExportComponent
          deps={
            Object {
              "getDateFromTimestamp": [Function],
              "reportGenerator": proxy {
                "___id": "BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8",
                "assessmentReportHtmlGenerator": undefined,
                "reportHtmlGenerator": undefined,
                "reportNameGenerator": undefined,
              },
              "scanActionCreator": null,
            }
          }
          featureFlagStoreData={
            Object {
              "somefeatureflag": true,
            }
          }
          getExportDescription={[Function]}
          htmlGenerator={[Function]}
          pageTitle="scan target name"
          reportExportFormat="AutomatedChecks"
          scanDate={1970-01-01T00:00:00.000Z}
          updatePersistedDescription={[Function]}
        />
      }
      featureFlag="exportReport"
      featureFlagStoreData={
        Object {
          "somefeatureflag": true,
        }
      }
    />
    <InsightsCommandButton
      ariaLabel="settings"
      className="settingsGearButton"
      data-automation-id="command-button-settings"
      iconProps={
        Object {
          "className": "settingsGearButtonIcon",
          "iconName": "Gear",
        }
      }
      onClick={[Function]}
    />
  </div>
</section>
`;
