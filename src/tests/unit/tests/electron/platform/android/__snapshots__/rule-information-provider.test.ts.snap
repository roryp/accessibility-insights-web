// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RuleInformationProvider getRuleInformation handles no foreground/background color values 1`] = `
Object {
  "howToFixSummary": "If the text is intended to be invisible, it passes. If the text is intended to be visible, use Accessibility Insights for Windows (or the Colour Contrast Analyzer if you're testing on a Mac) to manually verify that it has sufficient contrast compared to the background. If the background is an image or gradient, test an area where contrast appears to be lowest.",
  "richResolution": Object {
    "contentId": "android/ColorContrast",
    "labelType": "check",
  },
}
`;

exports[`RuleInformationProvider getRuleInformation returns correct data for ActiveViewName rule 1`] = `
Object {
  "howToFixSummary": "The view is active but has no name available to assistive technologies. Provide a name for the view using its contentDescription, hint, labelFor, or text attribute (depending on the view type)",
  "richResolution": Object {
    "contentId": "android/ActiveViewName",
    "labelType": "fix",
  },
}
`;

exports[`RuleInformationProvider getRuleInformation returns correct data for ColorContrast rule 1`] = `
Object {
  "howToFixSummary": "If the text is intended to be invisible, it passes. If the text is intended to be visible, use Accessibility Insights for Windows (or the Colour Contrast Analyzer if you're testing on a Mac) to manually verify that it has sufficient contrast compared to the background. If the background is an image or gradient, test an area where contrast appears to be lowest.",
  "richResolution": Object {
    "contentId": "android/ColorContrast",
    "labelType": "check",
  },
}
`;

exports[`RuleInformationProvider getRuleInformation returns correct data for EditTextValue rule 1`] = `
Object {
  "howToFixSummary": "The element's contentDescription overrides the text value required by assistive technologies. Remove the elementâ€™s contentDescription attribute.",
  "richResolution": Object {
    "contentId": "android/EditTextValue",
    "labelType": "fix",
  },
}
`;

exports[`RuleInformationProvider getRuleInformation returns correct data for ImageViewName rule 1`] = `
Object {
  "howToFixSummary": "The image has no alternate text and is not identified as decorative. If the image conveys meaningful content, provide alternate text using the contentDescription attribute. If the image is decorative, give it an empty contentDescription, or set its isImportantForAccessibility attribute to false.",
  "richResolution": Object {
    "contentId": "android/ImageViewName",
    "labelType": "fix",
  },
}
`;

exports[`RuleInformationProvider getRuleInformation returns correct data for TouchSizeWcag rule 1`] = `
Object {
  "howToFixSummary": "The element has an insufficient target size (width: 42.222dp, height: 38.222dp). Set the element's minWidth and minHeight attributes to at least 44dp.",
  "richResolution": Object {
    "contentId": "android/TouchSizeWcag",
    "contentVariables": Object {
      "logicalHeight": "38.222",
      "logicalWidth": "42.222",
    },
    "labelType": "fix",
  },
}
`;
